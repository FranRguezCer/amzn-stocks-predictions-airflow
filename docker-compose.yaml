x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.4}
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow_postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@airflow_postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@airflow_redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: "your_random_secret_key"
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plots:/opt/airflow/plots
    - ./models:/opt/airflow/models
    - ./scripts:/opt/airflow/scripts
    - ./requirements.txt:/opt/airflow/requirements.txt
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    airflow_redis:
      condition: service_healthy
    airflow_postgres:
      condition: service_healthy

services:
  airflow_web:
    container_name: airflow_web
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_worker:
    container_name: airflow_worker
    <<: *airflow-common
    command: celery worker
    restart: always
    depends_on:
      airflow_init:
        condition: service_completed_successfully
    entrypoint: >
      sh -c "pip install -r /opt/airflow/requirements.txt && exec airflow celery worker"

  airflow_scheduler:
    container_name: airflow_scheduler
    <<: *airflow-common
    command: scheduler
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow_init:
        condition: service_completed_successfully

  airflow_init:
    container_name: airflow_init
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        mkdir -p /opt/airflow/logs /opt/airflow/dags /opt/airflow/plots /opt/airflow/scripts /opt/airflow/models
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plots,scripts,models}
        exec /entrypoint airflow db upgrade
        airflow users create --username airflow --firstname Admin --lastname User --role Admin --email admin@example.com --password airflow
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: airflow
      _AIRFLOW_WWW_USER_PASSWORD: airflow
    user: "0:0"

  airflow_postgres:
    container_name: airflow_postgres
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5432:5432"

  airflow_redis:
    container_name: airflow_redis
    image: redis:7.2-bookworm
    expose:
      - 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always

volumes:
  postgres-db-volume:
